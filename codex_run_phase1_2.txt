# =============================================================
# Dunetube — Phase 1/2 Execution Plan for Codex
# =============================================================
# Version: 2025-10
# Author: Code Master + Amin (via ChatGPT)
# Purpose:
#   Define tasks and constraints for Codex automation of the
#   Dunetube project (frontend cleanup, studio MVP build, and
#   verification of phase 1/2 deliverables).
# =============================================================


[PROJECT_INFO]
Name: Dunetube
Type: Fullstack Learning Platform (YouTube-like)
Structure: Monorepo
Folders: /frontend, /backend, /infra, /docs
Frontend: React + Vite + Tailwind + TypeScript
Backend: Django REST Framework (SQLite → Postgres ready)
Auth: JWT via /api/token & /api/token/refresh
Media: Upload up to 500MB (videos, thumbnails)
Frontend Dev Server: npm run dev
Backend Dev Server: python manage.py runserver
[/PROJECT_INFO]


[GOALS_PHASE1_2]
1. Clean and stabilize frontend structure.
2. Keep only verified MVP pages.
3. Finalize Teacher Studio (UI/UX + routing + state + mock data).
4. Prepare backend integration points.
5. Ensure dev server runs cleanly without TypeScript or runtime errors.
[/GOALS_PHASE1_2]


# =============================================================
#  FRONTEND CLEANUP AND STRUCTURE
# =============================================================

[CLEANUP_FRONTEND_WHITELIST]
Keep ONLY these frontend files; delete the rest (files or dirs) if not listed.

frontend/package.json
frontend/tsconfig.json
frontend/vite.config.ts
frontend/tailwind.config.js
frontend/postcss.config.js
frontend/index.html
frontend/src/main.tsx
frontend/src/index.css
frontend/src/App.tsx

# public pages (keep as-is)
frontend/src/pages/Home.tsx
frontend/src/pages/CourseDetail.tsx
frontend/src/pages/Catalog.tsx
frontend/src/pages/LessonPlayer.tsx
frontend/src/pages/Checkout.tsx
frontend/src/pages/Dashboard.tsx
frontend/src/pages/Profile.tsx

# studio (teacher)
frontend/src/pages/studio/StudioCourses.tsx
frontend/src/pages/studio/StudioLessons.tsx
frontend/src/pages/studio/StudioFiles.tsx
frontend/src/pages/studio/StudioAssistants.tsx
frontend/src/pages/studio/StudioReports.tsx
frontend/src/pages/studio/StudioSettings.tsx
frontend/src/pages/studio/CourseEditor.tsx
frontend/src/pages/studio/_studioStore.ts

# layout + ui helpers
frontend/src/layouts/StudioLayout.tsx
frontend/src/components/ui/Toast.tsx
frontend/src/components/ui/Confirm.tsx
[/CLEANUP_FRONTEND_WHITELIST]

Rules:
- Remove any other frontend files not listed above.
- Keep folder structure exactly as shown.
- After cleanup, ensure `npm run dev` builds successfully.
- All import paths should be relative (no "@/").
- Maintain TypeScript strict mode and Tailwind utilities.


# =============================================================
#  TEACHER STUDIO MVP SCOPE
# =============================================================

[STUDIO_SCOPE_MVP]
Add/verify the following Studio (Teacher) features on frontend:

- Routing:
  - /studio (layout with fixed header + hamburger)
  - Sidebar: push on desktop, off-canvas on mobile
  - Nested routes:
    • /studio → StudioCourses
    • /studio/course/:id → CourseEditor (READ-ONLY)
    • /studio/course/:id/edit → CourseEditor (EDIT for draft only)

- Studio Layout:
  - Header fixed, contains hamburger menu + logo + search + “New course” button
  - Sidebar navigation items: Courses, Lessons, Files, Assistants, Reports, Settings
  - ToastProvider + ConfirmProvider wrap the <Outlet/>

- Courses Board (StudioCourses):
  - Each course card shows:
      status badge (draft/published/paused),
      lessons count,
      students count & rating (for published/paused).
  - Actions:
      • Draft → Edit / Publish
      • Published → View / Pause
      • Paused → View / Resume / Offer Migration
  - Publish, Pause, Resume use Confirm dialogs.
  - All actions trigger Toast notifications.
  - Filter buttons (All/Draft/Published/Paused) and search input.
  - Responsive grid layout (1–4 columns).
  - Offer Migration modal:
      - lists available draft courses as migration targets
      - clicking “Send offer” displays Toast (API placeholder for now)

- Course Editor (CourseEditor):
  - Tabs: Details / Lessons / Resources
  - READ-ONLY (for published/paused):
      • All fields disabled
      • Bottom button “Duplicate and edit” creates a NEW draft
        with new UID and navigates to /edit
  - EDIT (for draft + /edit path):
      • Details tab: title, status, description
      • Lessons tab:
          - Add / remove / reorder lessons
          - Each lesson has its own file inputs:
              video, pdf, slides, exercise/other
          - Reordering updates lesson numbering automatically
      • Resources tab: upload placeholders for books/slides/tests
  - Attachments use ObjectURL previews (mock, no backend yet)
  - UID for each course is permanent and unique
  - Draft duplication keeps structure but resets students/rating/files

- UI Helpers:
  - ToastProvider and ConfirmProvider implemented in
    src/components/ui/Toast.tsx and src/components/ui/Confirm.tsx
  - Mounted in StudioLayout (no "@/")

Deliverables:
- The above features fully implemented.
- No runtime or TypeScript errors.
- Dev server runs cleanly (`npm run dev`).
- Studio fully usable: create/edit/publish/pause/resume/migrate courses.
- Report final changelog of affected files.
[/STUDIO_SCOPE_MVP]


# =============================================================
#  BACKEND PREPARATION (FOR NEXT PHASE)
# =============================================================

[BACKEND_PREP]
- No major backend development in this phase.
- Ensure existing Django REST endpoints (token, refresh, courses) respond correctly.
- Prepare interface for Course/Lesson/Attachment/Migration endpoints to be integrated later.
- All API placeholders (upload, migration offer) should log or alert the intended request for now.
- Verify backend.md and phase1_2.json consistency.
[/BACKEND_PREP]


# =============================================================
#  EXECUTION STEPS (for Codex)
# =============================================================

[RUN_PLAN]
1. Execute CLEANUP_FRONTEND_WHITELIST (delete non-listed files).
2. Verify that `npm run dev` runs cleanly (React + Vite + Tailwind).
3. Implement all tasks under STUDIO_SCOPE_MVP.
4. Ensure StudioLayout includes Toast and Confirm providers.
5. Test all user flows manually (Edit / View / Duplicate / Migration).
6. Report completion with a changelog and screenshots.
[/RUN_PLAN]


# =============================================================
#  CHECKPOINT UPDATE (phase1_2.json)
# =============================================================

[CHECKPOINT_UPDATE]
Add new milestone to phase1_2.json:

{
  "id": "studio_mvp",
  "title": "Teacher Studio MVP (routing, view/edit, duplicate, migration, lessons uploads, reorder, toasts/confirms)",
  "done": false
}

Mark previous steps as done if verified.
After Codex runs successfully, set done=true.
[/CHECKPOINT_UPDATE]


# =============================================================
#  NOTES
# =============================================================

[NOTES]
- Use existing docs: README.md, ROADMAP.md, frontend.md, backend.md
- Maintain existing branding (deepBlue #0A355C, sand #E8DCC8)
- Avoid unnecessary dependency installs.
- Do not rename folders or change file casing.
- Keep all file paths relative (no "@/").
- After success, prepare phase3 plan for backend/API/infra expansion.
[/NOTES]
